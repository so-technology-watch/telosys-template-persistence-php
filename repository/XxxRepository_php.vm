<?php
#set ( $_ = "$" )
#set ( $uncapEntityName = ${fn.uncapitalize($entity.name)} )
#set ( $capEntityName = ${fn.capitalize($entity.name)} )
##
#set( $entityKeyAttrs = "" )
#set( $keyAttrCondition = "" )
#set( $keyAttrCondition2 = "" )
#foreach( $attribute in $entity.keyAttributes)
#if( $foreach.count < 2 )
#set( $entityKeyAttrs = "${_}"+${attribute.name} )
#set( $keyAttrCondition = "${_}Entry->get"+${fn.capitalize($attribute.name)}+"() === ${_}"+${attribute.name} )
#set( $keyAttrCondition2 = "${_}Entry->get"+${fn.capitalize($attribute.name)}+"() === ${_}" + ${uncapEntityName} + "->get" + ${fn.capitalize($attribute.name)}+"()" )
#else
#set( $entityKeyAttrs = $entityKeyAttrs + ", "+"${_}"+${attribute.name} )
#set( $keyAttrCondition = $keyAttrCondition + "&& ${_}Entry->get" + ${fn.capitalize($attribute.name)} + "() === ${_}" + ${attribute.name} )
#set( $keyAttrCondition2 = $keyAttrCondition2 + "&& ${_}Entry->get" + ${fn.capitalize($attribute.name)} + "() === ${_}" + ${uncapEntityName} + "->get" + ${fn.capitalize($attribute.name)}+"()" )
#end ## end if
#end ## end foreach
##
// Entity repository (data persistence)
class ${capEntityName}Repository
{
    private static ${_}_instance = null;

    public static function getInstance() {
        if(is_null(self::${_}_instance)) {
            self::${_}_instance = new ${capEntityName}Repository();
        }
        return self::${_}_instance;
    }

    public function __construct()
    {
        session_id('MemoryPersist');
        session_start();
    }

    /**
     * Get all entities method
     * @return array
     */
    public function getAll() {
		if(!isset(${_}_SESSION['${uncapEntityName}MemoryPersist'])) {
            ${_}_SESSION['${uncapEntityName}MemoryPersist'] = [];
        }
        return ${_}_SESSION['${uncapEntityName}MemoryPersist'];
    }

    /**
     * Get one entity by Id method
     * @param ${_}id
     * @return string
     */
    public function getOne(${entityKeyAttrs}) {
        ${_}result = "Error : ${capEntityName} not found.";
        foreach(${_}_SESSION['${uncapEntityName}MemoryPersist'] as ${_}Entry ){
            if(${keyAttrCondition}) ${_}result = ${_}Entry;
            break;
        }
        return ${_}result;
    }

    /**
     * Create one entity method
     * @param ${capEntityName} ${_}${uncapEntityName}
     * @return string
     */
    public function create(${capEntityName} ${_}${uncapEntityName}) {
        if(count(${_}_SESSION['${uncapEntityName}MemoryPersist']) != 0) {
            ${_}cpt = 0;
            foreach(${_}_SESSION['${uncapEntityName}MemoryPersist'] as ${_}Entry ){
                if(${keyAttrCondition2}) {
                    ${_}cpt++;
                }
            };

            if(${_}cpt != 0) {
                ${_}msg = 'Error : ${capEntityName} already exists.';
            }
            else {
                array_push(${_}_SESSION['${uncapEntityName}MemoryPersist'], ${_}${uncapEntityName});
                ${_}msg = '${capEntityName} creation successful';
            }
        }
        else {
            ${_}_SESSION['${uncapEntityName}MemoryPersist'] = [];
            array_push(${_}_SESSION['${uncapEntityName}MemoryPersist'], ${_}${uncapEntityName});
            ${_}msg = '${capEntityName} creation successful';
        }
        return ${_}msg;
    }

    /**
     * Update one entity method
     * @param ${capEntityName} ${_}${uncapEntityName}
     * @return string
     */
    public function update(${capEntityName} ${_}${uncapEntityName}) {
        foreach(${_}_SESSION['${uncapEntityName}MemoryPersist'] as ${_}Key => ${_}Entry ){
            if(${keyAttrCondition2}) {
                unset(${_}_SESSION['${uncapEntityName}MemoryPersist'][${_}Key]);
                array_push(${_}_SESSION['${uncapEntityName}MemoryPersist'], ${_}${uncapEntityName});
                ${_}msg = '${capEntityName} update successful';
                break;
            }
            else {
                ${_}msg = 'Error : ${capEntityName} not found.';
            }
        };
        return ${_}msg;
    }

    /**
     * Delete one entity method
     * @return string
     */
    public function delete(${entityKeyAttrs}) {
        foreach(${_}_SESSION['${uncapEntityName}MemoryPersist'] as ${_}Key => ${_}Entry ){
            if(${keyAttrCondition}) {
                unset(${_}_SESSION['${uncapEntityName}MemoryPersist'][${_}Key]);
                ${_}msg = '${capEntityName} deletion successful';
                break;
            }
            else {
                ${_}msg = 'Error : ${capEntityName} not found.';
            }
        };
        return ${_}msg;
    }
}